###############################################################################
# This file is part of the Openfirewall.                                    #
#                                                                             #
# Openfirewall is free software; you can redistribute it and/or modify               #
# it under the terms of the GNU General Public License as published by        #
# the Free Software Foundation; either version 2 of the License, or           #
# (at your option) any later version.                                         #
#                                                                             #
# Openfirewall is distributed in the hope that it will be useful,                    #
# but WITHOUT ANY WARRANTY; without even the implied warranty of              #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the               #
# GNU General Public License for more details.                                #
#                                                                             #
# You should have received a copy of the GNU General Public License           #
# along with Openfirewall; if not, write to the Free Software                        #
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA    #
#                                                                             #
# Makefiles are based on LFSMake, which is                                    #
# Copyright (C) 2002 Rod Roard <rod@sunsetsystems.com>                        #
#                                                                             #
# Modifications by:                                                           #
# ??-12-2003 Mark Wormgoor < mark@wormgoor.com>                               #
#          - Modified Makefile for Openfirewall build                                #
#                                                                             #
# $Id: mdadm 8083 2016-01-21 21:28:37Z owes $
#                                                                             #
###############################################################################

###############################################################################
# Definitions
###############################################################################

include Config

PKG_NAME   = mdadm
#VER        = 3.3.4
VER        = 4.0
HOST_ARCH  = all
OTHER_SRC  = yes

THISAPP    = $(PKG_NAME)-$(VER)
DL_FILE    = $(THISAPP).tar.xz
DL_FROM    = $(URL_KERNEL)/linux/utils/raid/mdadm
DIR_APP    = $(DIR_SRC)/$(THISAPP)
TARGET     = $(DIR_INFO)/$(STAGE_ORDER)_$(STAGE)/$(THISAPP)

###############################################################################
# Top-level Rules
###############################################################################

objects = $(DL_FILE)

$(DL_FILE) = $(DL_FROM)/$(DL_FILE)

##$(DL_FILE)_MD5 = 7ca8b114710f98f53f20c5787b674a09
$(DL_FILE)_MD5 = 2cb4feffea9167ba71b5f346a0c0a40d

install : $(TARGET)

check : $(patsubst %,$(DIR_CHK)/%,$(objects))

download :$(patsubst %,$(DIR_DL)/%,$(objects))

md5 : $(subst %,%_MD5,$(objects))

###############################################################################
# Downloading, checking, md5sum
###############################################################################

$(patsubst %,$(DIR_CHK)/%,$(objects)) :
	@$(CHECK)

$(patsubst %,$(DIR_DL)/%,$(objects)) :
	@$(LOAD)

$(subst %,%_MD5,$(objects)) :
	@$(MD5)

###############################################################################
# Installation Details
###############################################################################

$(TARGET) : $(firstword $(MAKEFILE_LIST)) $(patsubst %,$(DIR_DL)/%,$(objects))
	@$(PREBUILD)
	@rm -rf $(DIR_APP) && cd $(DIR_SRC) && tar xf $(DIR_DL)/$(DL_FILE)
	# Waiting a bit more is needed when system is loaded to avoid a timing issue, happen to me on various 05 -bitmap tests
	cd $(DIR_APP) && sed -i 's/sleep 4/sleep 8/g' tests/*

	# use external blkid with udev option to get all /dev/disk/by* symlinks
###	cd $(DIR_APP) && patch -p1 -i $(DIR_PATCHES)/$(THISAPP)_udev-blkid.patch
	# Fix compiler warning
###	cd $(DIR_APP) && patch -p1 -i $(DIR_PATCHES)/$(THISAPP)_compiler-fix.patch

	cd $(DIR_APP) && patch -p0 -i $(DIR_PATCHES)/$(THISAPP)_compile.patch

	cd $(DIR_APP) && sed -i 's|sbin\/sendmail|bin/sendEmail|' Makefile
	# CXFLAGS="$(CFLAGS)" is required to set the optimization level or -O0 is used and FORTIFY does not apply
	# Compile mdadm, mdmon and programs needed for the tests
	cd $(DIR_APP) && make -j $(PARALLELISM)
##	cd $(DIR_APP) && make -j $(PARALLELISM) \
##					CXFLAGS="$(CFLAGS)" \
##					MAP_DIR='/dev/.mdadm' \
##					FAILED_SLOTS_DIR='/dev/.mdadm/failed-slots' \
##					RUN_DIR='/dev/.mdadm' \
##					test

ifeq "$(RUNNING_TEST)" "yes"
	# - still fail even when running the same kernel version we compile,
	# - break someone using loop for real usage, and probably too if running a raid array as rootfs
	# - let md_mod modules loaded after the tests
	# Too much failures after 06 tests, will not try for now
	cd $(DIR_APP) && rm -f tests/{07,08,09,10,11,12,13,14,15,16,18}*
	# - on master branch, syntax add --keep-going to continue even if an error happen, output should be too better structured
	# Not yet ready : use it at your own initiative for the reasons above
	#-cd $(DIR_APP) && bash ./test &> $(DIR_TEST)/$(THISAPP)-$(STAGE_ORDER).log
	# Cleanup
	rm -f /var/tmp/*
endif
	cd $(DIR_APP) && make install RUN_DIR='/dev/.mdadm'

	@rm -rf $(DIR_APP)
	@$(POSTBUILD)
